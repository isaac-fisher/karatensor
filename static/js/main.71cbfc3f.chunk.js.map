{"version":3,"sources":["utils/setInterval.js","components/world/container.js","components/controllers/video.js","components/logic.js","App.js","serviceWorker.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","screenWidth","playerWidth","movment","Scene","styled","Player","location","World","move","useState","setLocation","a","toLowerCase","console","log","classes","Vid","setMove","videoEl","training","setTraining","testing","setTesting","knn","setKnn","mobilenetM","setMobilenetM","window","knnClassifier","create","mobilenet","load","setModel","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","play","image","tf","browser","fromPixels","infer","logits","addExample","predictClass","result","label","ref","autoPlay","width","height","map","name","index","key","onMouseDown","onMouseLeave","onMouseUp","onClick","style","color","Logic","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71cbfc3f.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React, { useState } from 'react';\nimport { useInterval } from '../../utils/setInterval';\nimport styled from \"styled-components\";\n\nconst screenWidth = 640;\nconst screenHeight = 480;\nconst playerWidth = 40;\nconst playerHeight = 40;\nconst movment = 5;\n\nconst Scene = styled('div')`\n  position: absolute;\n  bottom: 0;\n  width: ${screenWidth}px;\n  height: ${screenHeight}px;\n  border: black solid 1px;\n  display: flex;\n`;\n\nconst Player = styled('div')`\n  background-color: rebeccapurple;\n  width: ${playerWidth}px;\n  height: ${playerHeight}px;\n  border-radius: 12px;\n  align-self: flex-end;\n  margin-left: ${({location}) => location}px;\n`;\n\nfunction World({ move }) {\n  const [location, setLocation] = useState(0);\n\n  useInterval(async () => {\n    move = move.toLowerCase();\n    console.log(move);\n    if (move === \"left\") {\n      setLocation(location - movment < 0 ? 0 : location - movment);\n    } else if (move === \"right\") {\n      setLocation(location + movment > screenWidth - playerWidth ? screenWidth - playerWidth : location + movment)\n    }\n  }, 80);\n\n  return (\n    <Scene>\n      <Player location={location}/>\n    </Scene>\n  );\n}\n\nexport default World;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useInterval } from '../../utils/setInterval';\n\nconst classes = ['Left', 'No', 'Right'];\n\nfunction Vid({setMove}) {\n  const videoEl = useRef(null);\n  const [training, setTraining] = useState(null);\n  const [testing, setTesting] = useState(false);\n  const [knn, setKnn] = useState(null);\n  const [mobilenetM, setMobilenetM] = useState(null);\n\n  useEffect(() => {\n    async function setModel() {\n      setKnn(window.knnClassifier.create());\n      setMobilenetM(await window.mobilenet.load());\n    }\n    setModel();\n    console.log(\"model loaded\");\n  }, []);\n\n  useEffect(() => {\n    if (!videoEl) { return }\n    navigator.mediaDevices.getUserMedia({video:true})\n      .then(stream => {let video = videoEl.current;\n        video.srcObject = stream;\n        video.play();\n      })\n  }, [videoEl]);\n\n  const toggleTesting = () => {\n    setTesting(!testing);\n  };\n\n  useInterval(async () => {\n    if (training === null && !testing) return;\n    const image = window.tf.browser.fromPixels(videoEl.current);\n    let logits;\n    const infer = () => mobilenetM.infer(image, \"conv_preds\");\n    if (training !== null) {\n      logits = infer();\n      knn.addExample(logits, training);\n    }\n    if (testing) {\n      logits = infer();\n      const result = await knn.predictClass(logits);\n      setMove(classes[result.label])\n    }\n  }, 80);\n\n  return (\n    <div>\n      {/*<button onClick={toggleStreaming}>{streaming ? 'Pause Video' :  'Start Video'}</button>*/}\n      <video ref={videoEl} autoPlay width=\"227\" height=\"227\"/>\n      <div>\n        {classes.map((name, index) => (\n          <button key={index} onMouseDown={() => setTraining(index)} onMouseLeave={()=> setTraining(null)} onMouseUp={()=> setTraining(null)}>{name} gesture</button>\n        ))}\n        <br/>\n        <button onClick={toggleTesting} style={{color: testing ? 'green' : 'red'}}>Test</button>\n        {/*{ training !== null ? <p>Now training {training}</p> : null}*/}\n        {/*{ (testing && res !== null) ? <p>{classes[res]}</p> : null }*/}\n      </div>\n    </div>\n  );\n}\n\nexport default Vid;\n","import React, { useState } from 'react';\nimport World from \"./world/container\";\nimport Vid from \"./controllers/video\";\n\nfunction Logic() {\n  const [move, setMove] = useState(\"\");\n  return (\n    <>\n      <Vid setMove={setMove}/>\n      <World move={move}/>\n    </>\n  );\n}\n\nexport default Logic;\n","import React from 'react';\nimport Logic from \"./components/logic\";\n\nfunction App() {\n\n  return (\n    <Logic/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}